#include <string>
#include <vector>
#include <map>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <set>
#include <iostream>
#include <sstream>
#include <cstddef>
#include <algorithm>
#include <utility>
#include <iterator>
#include <numeric>
#include <list>
#include <complex>

using namespace std;


//g++ -std=c++98 MooingCows.cpp -o MooingCows
//./MooingCows

typedef vector<int> vi;
typedef vector<string> vs;
typedef long long ll;
typedef complex<int> pnt;
typedef pair<int, int> pii;

#define FOR(i,a,b) for(i=a;i<b;i++)
#define RA(x) (x).begin(), (x).end()
#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)
#define SZ(x) ((int) (x).size())
#define X first
#define Y second



/*
Problem (3) MooingCows:
Initial thoughts:

This problem is definitely at most O(n^4) because you have to check each position in Byterland, 
And then I am nesting two loops to find the dissatisfaction of a cow at (i,j) is equal to the square of the distance between them: ((x-i)2 + (y-j)2). 
And then to find the total dissatisfaction is the sum of the dissatisfaction of all the cows.


Pseudo-Code:

class MooingCows
public:
    public procedure compare(vector <string> f,int min_value,int x,int y,int n,int m){
        int sum = 0;
        Repeat(int i=0;i<n;i++){
            Repeat(int j=0;j<m;j++){
                if(f[i][j]=='C' &&
                   !(i==x && y==j))
                {
                    sum += (x-i)*(x-i) + (y-j)*(y-j);
                }
            EndRepeat
        EndRepeat
        return min(min_value, sum);
    endprocedure
    public procedure dissatisfaction(vector <string> f){
        int n = (int)f.size();
        int m = (int)(f[0].size());
        int min_value = 2147483647; //max value of integer
        Repeat(int x=0;x<n;x++){
            Repeat(int y=0;y<m;y++){
                if(f[x][y] == 'C'){
                    min_value=compare(f,min_value,x,y,n,m);
                }
            EndRepeat
        EndRepeat
        return min_value;
    endprocedure
enclass


Reflection:

I would like to use an O(n^4) brute force solution, it is pretty easy to find all the distance between them.
I iterate through the integer nesting array and check if the value of distance small than the previous value.
Then I can save such value.


*/



class MooingCows {
public:
    int compare(vector <string> f,int min_value,int x,int y,int n,int m){
        int sum = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(f[i][j]=='C' &&
                   !(i==x && y==j))
                {
                    sum += (x-i)*(x-i) + (y-j)*(y-j);
                }
            }
        }
        return min(min_value, sum);
    }
    int dissatisfaction(vector <string> f){
        int n = (int)f.size();
        int m = (int)(f[0].size());
        int min_value = 2147483647; //max value of integer
        for(int x=0;x<n;x++){
            for(int y=0;y<m;y++){
                if(f[x][y] == 'C'){
                    min_value=compare(f,min_value,x,y,n,m);
                }
            }
        }
        return min_value;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    MooingCows *obj;
    int answer;
    obj = new MooingCows();
    clock_t startTime = clock();
    answer = obj->dissatisfaction(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    vector <string> p0;
    int p1;
    
    {
        // ----- test 0 -----
        string t0[] = {"C..",".C.",".C."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
    
    {
        // ----- test 1 -----
        string t0[] = {"CCCC","CCCC","CCCC"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 26;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }
    
    {
        // ----- test 2 -----
        string t0[] = {"C"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 0;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }
    
    {
        // ----- test 3 -----
        string t0[] = {"CCC....","C......","....C.C",".C.CC..","C......"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 81;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING




//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
