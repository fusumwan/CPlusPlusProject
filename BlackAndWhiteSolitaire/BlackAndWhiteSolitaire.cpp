#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <tuple>


using namespace std;


/*
Problem (1) BlackAndWhiteSolitaire:
Initial thoughts:

As a jumpy count is a positive integer, and all adjacent numbers have a difference of at least 2.

So this program use brute force. Because the brute force solution is simply to process each card font for every character and then save the number of the B and word. 

This is particularly efficient because it is possible to process all instructions through brute force  algorithms.



Pseudo-Code:

class BlackAndWhiteSolitaire 
    public procedure minimumTurns(string cardFront) {
        char current = 'B';
        int b_c,w_c = 0;
        int i=0;
        Repeat(i<cardFront.length())
            if (current==cardFront[i]  )
                b_c++;
            else
                w_c++;
            
            if (current == 'B')
                current = 'W';
            else
                current = 'B';
            i++;
        EndRepeat
        return (b_c>w_c)?w_c:b_c;
    endprocedure
endclass


Reflection:

I would like to use brute force solution to find the number of operation. 
Because it is very fast to find out the answer.

*/



class BlackAndWhiteSolitaire {
public:
    int minimumTurns(string cardFront) {
        char current = 'B';
        int b_c,w_c = 0;
        int i=0;
        while(i<cardFront.length())
        {
            if (current==cardFront[i]  )
                b_c++;
            else
                w_c++;
            
            if (current == 'B')
                current = 'W';
            else
                current = 'B';
            i++;
        }
        return (b_c>w_c)?w_c:b_c;
    }
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
    cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
    cout << "]" << endl;
    BlackAndWhiteSolitaire *obj;
    int answer;
    obj = new BlackAndWhiteSolitaire();
    clock_t startTime = clock();
    answer = obj->minimumTurns(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p1 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p1;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    string p0;
    int p1;
    
    {
        // ----- test 0 -----
        p0 = "BBBW";
        p1 = 1;
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }
    
    {
        // ----- test 1 -----
        p0 = "WBWBW";
        p1 = 0;
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }
    
    {
        // ----- test 2 -----
        p0 = "WWWWWWWWW";
        p1 = 4;
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }
    
    {
        // ----- test 3 -----
        p0 = "BBWBWWBWBWWBBBWBWBWBBWBBW";
        p1 = 10;
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
